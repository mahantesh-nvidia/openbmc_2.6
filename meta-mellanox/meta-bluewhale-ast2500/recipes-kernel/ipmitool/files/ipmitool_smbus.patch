From 20d5e59357cb7fa13bb4a3cbf0f99bbc486b93e5 Mon Sep 17 00:00:00 2001
From: Asmaa Mnebhi <Asmaa@mellanox.com>
Date: Tue, 8 Jan 2019 17:50:58 -0500
Subject: [PATCH] bmc ipmb

Signed-off-by: Asmaa Mnebhi <Asmaa@mellanox.com>
---
 include/ipmitool/ipmi_sdr.h | 20 ++++++++++++++++----
 src/plugins/open/open.c     | 16 +++++++++++++++-
 2 files changed, 31 insertions(+), 5 deletions(-)

diff --git a/include/ipmitool/ipmi_sdr.h b/include/ipmitool/ipmi_sdr.h
index 5e6afd3..683773e 100644
--- a/include/ipmitool/ipmi_sdr.h
+++ b/include/ipmitool/ipmi_sdr.h
@@ -851,11 +851,23 @@ struct sensor_reading {
  *	accessed using the user specified bridging command line arguments.
  *	Access to any sensor on the target IPMB-0 can be addressed using the
  *	target address and transit address in the interface.
+ *
+ * #define BRIDGE_TO_SENSOR(_intf, _addr, _chan)			\
+ * ( !((_chan == 0 && _intf->target_ipmb_addr &&			\
+ *			     _intf->target_ipmb_addr == _addr)  ||	\
+ *    (_addr == _intf->target_addr && _chan == _intf->target_channel)) )
+ */
+
+/*
+ * We wrote the ipmb_host.c driver to be able to send IPMB requests from a host to
+ * a satellite MC. This has not been implemented before so ipmitool does not support
+ * this feature at the moment. This transaction is sorted as a bridging request by
+ * ipmitool so we need to disable bridging.
+ * In the future, we can avoid these modifications by changing the ipmb_host.c driver
+ * to discard the bridge IPMB header message before forwarding the encapsulated
+ * data for IPMB request to the satellite MC.
  */
-#define BRIDGE_TO_SENSOR(_intf, _addr, _chan)			\
- ( !((_chan == 0 && _intf->target_ipmb_addr &&			\
-			     _intf->target_ipmb_addr == _addr)  ||	\
-    (_addr == _intf->target_addr && _chan == _intf->target_channel)) )
+#define BRIDGE_TO_SENSOR(_intf, _addr, _chan)	0
 
 
 struct ipmi_sdr_iterator *ipmi_sdr_start(struct ipmi_intf *intf,
diff --git a/src/plugins/open/open.c b/src/plugins/open/open.c
index 63f3624..588176c 100644
--- a/src/plugins/open/open.c
+++ b/src/plugins/open/open.c
@@ -437,11 +437,25 @@ ipmi_openipmi_send_cmd(struct ipmi_intf * intf, struct ipmi_rq * req)
 	return &rsp;
 }
 
+/*
+ * We use "ipmitool -I open" to test the IPMB driver on the BMC and
+ * Bluefield side. Since we are actually not doing bridging but sending
+ * IPMB messages directly from the BMC to the Bluefield, this feature is
+ * not supported by ipmitool. Here, max_request_data_size is set to 35
+ * bytes while a non bridged IPMB message should never exceed 32 bytes.
+ * So, we need to send the IPMB responses into chunks of size equal or
+ * less than 32 bytes. Otherwise, the i2c driver will truncate all
+ * messages higher than 32 bytes. Hence, we will lose response data.
+ * This macro restricts the payload size to 25 (+7 bytes of header
+ * message) which is the standard for IPMB messaging.
+ */
+#define IPMI_DEFAULT_PAYLOAD_SIZE   25
+
 int ipmi_openipmi_setup(struct ipmi_intf * intf)
 {
 	/* set default payload size */
 	intf->max_request_data_size = IPMI_OPENIPMI_MAX_RQ_DATA_SIZE;
-	intf->max_response_data_size = IPMI_OPENIPMI_MAX_RS_DATA_SIZE;
+	intf->max_response_data_size = IPMI_DEFAULT_PAYLOAD_SIZE;
 
 	return 0;
 }
-- 
2.1.2

