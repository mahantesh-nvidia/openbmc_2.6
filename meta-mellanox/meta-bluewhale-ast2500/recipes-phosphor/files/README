Mellanox BlueField BMC README (last modified 04/18/2019)

Introduction
============
OpenBMC is an open source software framework to build a complete Linux
image for a Board Management Controller (BMC). It uses the Yocto Project
as the underlying build and distribution generation framework.
The Mellanox BlueField BMC image is based on OpenBMC.

The OpenBMC project's source code and documentation can be found at:
    https://github.com/openbmc/openbmc

The BlueField BMC image includes many software components, but the
important software components to note are listed below:
    U-Boot bootloader (v2016.07)
    Linux kernel (v4.19.13)
    OpenBMC distro (v2.6)
    OpenIPMI package (v2.0.27)


BMC source code tarball
=======================
The source code tarball is named "BlueField-BMC-<version>.tar.xz",
where <version> is the OpenBMC version used by BlueField BMC image.
The contents of the tarball are as follows:

    README - help file

    mlnx_setup_openbmc - script for setting up OpenBMC build workspace

    Patch file to be applied to OpenBMC distro, e.g. "openbmc-9afb671.patch"

    Patch file to be applied to Linux kernel, e.g. "linux-db64579.patch"

    Patch file to be applied to U-Boot, e.g. "u-boot-fc8646e.patch"

    Mellanox tools source code - e.g. "mellanox-bmc-tools.tar.gz"

The source code patch files are named "<component>-<upstream-SHA>.patch"
and are generated by running "git diff" between the specified upstream code
and Mellanox customizations.  These patch files are used by the Yocto
build to create an OpenBMC image useable by the BlueField BMC platform.


How to build BlueField BMC
==========================
Un-tar the "BlueField-BMC-<version>.tar.xz" file
Run "mlnx_setup_openbmc" script, which handles all the steps to setup
  a BMC workspace (e.g. performs 'git clone' operations, applies
  patches, etc.)  For details on all the exact steps performed by the
  script, review comments within the script itself.
After running this script, the OpenBMC workspace can be built by:
 1) cd openbmc-<upstream-SHA>
 2) export TEMPLATECONF=meta-mellanox/meta-bluewhale-ast2500/conf
 3) source oe-init-build-env <build_directory>
    - <build_directory> holds build output, approximately 25-30GB
 4) bitbake obmc-phosphor-image
 5) One of the build products is a 32MB file called "image-bmc" in the
    directory "<build_directory>/tmp/deploy/images/bluewhale-ast2500"
    This file is used to re-program your hardware platform with the
    new BMC image (see below)


How to upgrade BlueField BMC image
==================================
BMC software may be upgraded from the BMC shell or a remote server.

To upgrade BMC software from shell:
  1) Upload BMC image using standard Linux SCP protocol
     Run from the remote server: scp image-bmc root@<BMC_IP>:/tmp
  2) Log into BMC console
  3) Run the update script from the BMC using the following command:
      /run/initramfs/update_all /tmp/image-bmc
  4) The script automatically reboots the BMC to update to the new version.
     Allow the system to boot without interruption for a few minutes until
     the upgrade procedure is complete.

To upgrade BMC software from remote server:
  1) Upload BMC image using standard Linux SCP protocol
     Run from the remote server: scp image-bmc root@<BMC_IP>:/tmp
  2) Run the update script using the following command:
     sshpass -p "<root-password>" ssh root@<BMC_IP> '/run/initramfs/update_all /tmp/image-bmc'
  3) The script automatically reboots the BMC to update to the new version.
     Allow the system to boot without interruption for a few minutes until
     the upgrade procedure is complete.


Software Versioning
===================
There is a software version for each of the three primary software components.
You may retrieve this information by logging into the BMC console, and by
running the following for each component:
    U-boot version: "version" command from the U-Boot prompt
    Linux version: "uname -a" command from the Linux prompt
    OpenBMC version: "cat /etc/os-release" from the Linux prompt


Software Developers Kit (SDK) for BMC development
=================================================
The OpenBMC build framework has the ability to create an SDK that can build
user-space "C" programs to run on a BMC.  The steps are as follows:
 1) cd openbmc-<upstream-SHA>
 2) export TEMPLATECONF=meta-mellanox/meta-bluewhale-ast2500/conf
 3) source oe-init-build-env <build_directory>
 4) bitbake -c populate_sdk obmc-phosphor-image
   - This produces a sub-directory at "<build_directory>/tmp/deploy/sdk".
     In this sub-directory there is a shell script that can be executed to
     install the SDK to any location (note: it takes ~1.4GB).
 5) Execute shell script to install SDK, e.g. at "/path/to/sdk"
   $ <build_directory>/tmp/deploy/sdk/oecore-x86_64-armv6-toolchain-nodistro.0.sh
 6) Source the environment setup script:
   $ . /path/to/sdk/environment-setup-armv6-openbmc-linux-gnueabi
 7) The environment now includes $CC, and other GNU tools, for BMC builds:
   $ echo $CC
       arm-openbmc-linux-gnueabi-gcc -march=armv6 -marm -mtune=arm1176jz-s \
       --sysroot=/path/to/sdk/sysroots/armv6-openbmc-linux-gnueabi
 8) The cross-compiler ($CC) and other tools can be executed manually
    in a shell session, or placed into Makefiles for building BMC programs.
